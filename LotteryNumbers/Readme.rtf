{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww28600\viewh15080\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf0 \
The range of allowed numbers is between 1 to 59.  This means only the strings whose length is between 7(all numbers with 1 digit) and 14(all numbers with 2 digits) can satisfy this condition. Hence this should be the first check. \
\
Once we encounter a string which is between 7 and 14 in length, it is possible to get 7 valid numbers from it. As we are parsing every digit, the algorithm generates all possible combinations. e.g. lets say we have parsed 2 digits in a number \{ 4, 5 \} possible combinations at this point are  \
	a) \{4,5\}, \
	b) \{45\} \
\
With every new digit parsed, check if the digit is non-zero. 0 will have special handling. For non-zero digit, check each of the previous combination. \
	a) In the list of every combination, check the last number. If the last number is between 1 and 5, we can append the digit to create a new valid number. Insert this new combination into the list\
		\{4, 56\} \
	b) If the last number is not between 1 and 5, then simply add the new parsed digit to the list on its own. \
\
		\{4, 5, 6\} \
		\{45, 6\} \
\
Above is done by the method - AddNonZeroValueToTheList. \
\
In case a 0 is encountered, then it cannot be added on its own to the combinations list.  It can be appended to the previous digit, but only if the previous number is between 1 and 5 - 10 to 50 are valid numbers within range 1 to 59. Zero is handled by the method AddZeroToTheList. \
\
When the size of any combination list becomes longer than 7, then that list should be dropped.  Valid lists are only ones which have the exact length of 7. \
\
Since we never exceed the size 7 in the combinations list and we don't inspect the strings longer than 14, this is a fairly fast algorithm in-spite of generating all lottery number combinations.\
\
\
\
\
}